#!/usr/bin/env bash
# shellcheck disable=SC1091,SC2002,SC2207
# vim: ft=bash

if [[ $(uname -s) != "Darwin" ]]; then
  echo -e "\e[31;1mERROR: This script is only supported on OS-X.\e[0m"
  exit 1
fi

echo "Please wait while we install BASH dependencies..."

export BASHMATIC_HOME="${BASHMATIC_HOME:-"${HOME}/.bashmatic"}"
[[ -z ${BASHMATIC_HOME} ]] && export BASHMATIC_HOME="${HOME}/.bashmatic"
[[ -d ${BASHMATIC_HOME} ]] || bash -c "$(curl -fsSL https://bashmatic.re1.re); bashmatic-install -q"
[[ -d ${BASHMATIC_HOME} ]] || {
  echo "Can't find Bashmatic, even after attempting an installation."
  echo "Please install Bashmatic with the following command line:"
  echo 'bash -c "$(curl -fsSL https://bashmatic.re1.re); bashmatic-install"'
  exit 1
}

# shellcheck source="${BASHMATIC_HOME}/init.sh"
source "${BASHMATIC_HOME}/init" >/dev/null
output.constrain-screen-width 100

declare -g timestamp
export timestamp="$(time.now.db)"

h3bg  "Installing Brew Packages..."
run.set-all continue-on-error
run "brew bundle --no-upgrade --no-lock"
run.set-all abort-on-error

if [[ -d ~/.vim && -f ~/.vimrc ]]; then
  h2 "Making a backup of your Current VIM Setup"
  run "cp -p -v ~/.vimrc ~/.vimrc.${timestamp}"
fi

h3bg  "Installing custom vim configuration locally..."
run "cp -f development/config/.vimrc ${HOME}"
run "cp -f development/config/.vimrc.customizations ${HOME}"

h3bg  "Installing VIM Plugins... Please wait."
run.set-next show-output-on
run "vim -E +PlugInstall +qall"

h3bg  "Installing ~/.psqlrc"
run "mv ~/.psqlrc ~/.psqlrc.${timestamp}"
run.set-next show-output-on
run "cp -p -v development/config/.psqlrc* ${HOME}"

export ruby_version="$(cat .ruby-version | tr -d '\n')"

if [[ -z $(rbenv versions | grep "${ruby_version}") ]]; then
  h3bg  "Installing Ruby"

  run "brew update && brew install rbenv ruby-build"
  run "brew install jemalloc rust"
  h2 "Building Ruby... with Jemalloc & YJIT"

  run.set-all abort-on-error

  unset CFLAGS
  export RUBY_CFLAGS="-Wno-error=implicit-function-declaration"
  run.set-next show-output-on
  run "RUBY_CONFIGURE_OPTS='--enable-yjit --with-jemalloc' rbenv install -f ${ruby_version}"
else
  rbenv local "${ruby_version}"
  success "Ruby ${ruby_version} was already installed."
fi

run.set-next abort-on-error
[[ -f Gemfile ]] && run "bundle install -j 4"

